var documenterSearchIndex = {"docs":
[{"location":"Library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"Library/","page":"Library","title":"Library","text":"","category":"page"},{"location":"Library/","page":"Library","title":"Library","text":"Modules = [SMLMData]","category":"page"},{"location":"Library/#SMLMData.SMLMData","page":"Library","title":"SMLMData.SMLMData","text":"SMLMData\n\nA Julia package for working with Single Molecule Localization Microscopy (SMLM) data.\n\nFeatures\n\nType system for emitters, cameras, and localization data\nPhysical coordinate handling (microns) with camera pixel mappings\nFiltering and ROI selection tools\nSMITE format compatibility\nMemory-efficient data structures\n\nBasic Usage\n\nusing SMLMData\n\n# Create a camera\ncam = IdealCamera(1:512, 1:512, 0.1)  # 512x512 camera with 0.1 micron pixels\n\n# Create some emitters\nemitters = [\n    Emitter2DFit{Float64}(1.0, 2.0, 1000.0, 10.0, 0.01, 0.01, 50.0, 2.0),\n    Emitter2DFit{Float64}(3.0, 4.0, 1200.0, 12.0, 0.01, 0.01, 60.0, 2.0)\n]\n\n# Create SMLD object\nsmld = BasicSMLD(emitters, cam, 1, 1, Dict{String,Any}())\n\n# Filter operations\nroi = filter_roi(smld, 0.0:2.0, 1.0:3.0)\nbright = @filter(smld, photons > 1000)\n\n\n\n\n\n","category":"module"},{"location":"Library/#SMLMData.AbstractCamera","page":"Library","title":"SMLMData.AbstractCamera","text":"AbstractCamera\n\nAbstract base type for all camera implementations in single molecule localization microscopy (SMLM).\n\nInterface Requirements\n\nAny concrete subtype of AbstractCamera must provide:\n\nField Requirements:\npixel_edges_x::Vector{<:Real}: Vector of pixel edge positions in x direction\npixel_edges_y::Vector{<:Real}: Vector of pixel edge positions in y direction\nUnits:\nAll edge positions must be in physical units (microns)\nOrigin (0,0) corresponds to the top-left corner of the camera\nFor a camera with N×M pixels, there will be N+1 x-edges and M+1 y-edges\nCoordinate Convention:\nPixel (1,1) is centered at (pixelsizex/2, pixelsizey/2) microns\nEdge positions define the boundaries of pixels in physical space\nFirst edge position corresponds to the left/top edge of the first pixel\nLast edge position corresponds to the right/bottom edge of the last pixel\n\nNotes\n\nEdge positions must be monotonically increasing\nThe number of edges must be one more than the number of pixels in each dimension\nWhile pixels are typically uniform in size, this is not a requirement of the interface\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.AbstractEmitter","page":"Library","title":"SMLMData.AbstractEmitter","text":"AbstractEmitter\n\nAbstract supertype for all emitter types in single molecule localization microscopy (SMLM). All spatial coordinates are specified in physical units (microns).\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.BasicSMLD","page":"Library","title":"SMLMData.BasicSMLD","text":"BasicSMLD{T,E<:AbstractEmitter} <: SMLD\n\nBasic container for single molecule localization data.\n\nFields\n\nemitters::Vector{E}: Vector of localized emitters\ncamera::AbstractCamera: Camera used for acquisition\nn_frames::Int: Total number of frames in acquisition\nn_datasets::Int: Number of datasets in the acquisition\nmetadata::Dict{String,Any}: Additional dataset information\n\nType Parameters\n\nT: Numeric type for coordinates (typically Float64)\nE: Concrete emitter type\n\nExample\n\n# Create camera\ncam = IdealCamera(1:512, 1:512, 0.1)\n\n# Create some emitters\nemitters = [\n    Emitter2DFit{Float64}(1.0, 1.0, 1000.0, 10.0, 0.01, 0.01, 50.0, 2.0; frame=1),\n    Emitter2DFit{Float64}(5.0, 5.0, 1200.0, 12.0, 0.01, 0.01, 60.0, 2.0; frame=2)\n]\n\n# Create metadata\nmetadata = Dict{String,Any}(\n    \"exposure_time\" => 0.1,\n    \"timestamp\" => now(),\n    \"sample\" => \"Test Sample\"\n)\n\n# Create SMLD object\ndata = BasicSMLD(emitters, cam, 2, 1, metadata)\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.BasicSMLD-Union{Tuple{E}, Tuple{Vector{E}, AbstractCamera, Int64, Int64}, Tuple{Vector{E}, AbstractCamera, Int64, Int64, Dict{String, Any}}} where E<:AbstractEmitter","page":"Library","title":"SMLMData.BasicSMLD","text":"BasicSMLD(emitters::Vector{E}, camera::AbstractCamera,\n          n_frames::Int, n_datasets::Int,\n          metadata::Dict{String,Any}=Dict{String,Any}()) where E<:AbstractEmitter\n\nConstruct a BasicSMLD from a vector of emitters and required metadata.\n\nArguments\n\nemitters::Vector{E}: Vector of localized emitters\ncamera::AbstractCamera: Camera used for acquisition\nn_frames::Int: Total number of frames in acquisition\nn_datasets::Int: Number of datasets in acquisition\nmetadata::Dict{String,Any}=Dict{String,Any}(): Optional additional information\n\nThe numeric type T is inferred from the camera's pixeledgesx type.\n\nExample\n\n# Create with minimal metadata\ndata = BasicSMLD(emitters, camera, 10, 1)\n\n# Create with additional metadata\ndata = BasicSMLD(emitters, camera, 10, 1, Dict(\n    \"exposure_time\" => 0.1,\n    \"timestamp\" => now()\n))\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.Emitter2D","page":"Library","title":"SMLMData.Emitter2D","text":"Emitter2D{T} <: AbstractEmitter\n\nRepresents a 2D emitter for SMLM simulations with position and brightness.\n\nFields\n\nx::T: x-coordinate in microns\ny::T: y-coordinate in microns\nphotons::T: number of photons emitted by the fluorophore\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.Emitter2DFit","page":"Library","title":"SMLMData.Emitter2DFit","text":"Emitter2DFit{T} <: AbstractEmitter\n\nRepresents fitted 2D localization results with uncertainties and temporal/tracking information.\n\nFields\n\nx::T: fitted x-coordinate in microns\ny::T: fitted y-coordinate in microns\nphotons::T: fitted number of photons\nbg::T: fitted background in photons/pixel\nσ_x::T: uncertainty in x position in microns\nσ_y::T: uncertainty in y position in microns\nσ_photons::T: uncertainty in photon count\nσ_bg::T: uncertainty in background in photons/pixel\nframe::Int: frame number in acquisition sequence\ndataset::Int: identifier for specific acquisition/dataset\ntrack_id::Int: identifier for linking localizations across frames (0 = unlinked)\nid::Int: unique identifier within dataset\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.Emitter2DFit-Union{Tuple{T}, NTuple{8, T}} where T","page":"Library","title":"SMLMData.Emitter2DFit","text":"Emitter2DFit{T}(x, y, photons, bg, σ_x, σ_y, σ_photons, σ_bg;\n                frame=0, dataset=1, track_id=0, id=0) where T\n\nConvenience constructor for 2D localization fit results with optional identification parameters.\n\nArguments\n\nRequired\n\nx::T: fitted x-coordinate in microns\ny::T: fitted y-coordinate in microns\nphotons::T: fitted number of photons\nbg::T: fitted background in photons/pixel\nσ_x::T: uncertainty in x position in microns\nσ_y::T: uncertainty in y position in microns\nσ_photons::T: uncertainty in photon count\nσ_bg::T: uncertainty in background level\n\nOptional Keywords\n\nframe::Int=0: frame number in acquisition sequence\ndataset::Int=1: identifier for specific acquisition/dataset\ntrack_id::Int=0: identifier for linking localizations across frames\nid::Int=0: unique identifier within dataset\n\nExample\n\n# Create emitter with just required parameters\nemitter = Emitter2DFit{Float64}(\n    1.0, 2.0,        # x, y\n    1000.0, 10.0,    # photons, background\n    0.01, 0.01,      # σ_x, σ_y\n    50.0, 2.0        # σ_photons, σ_bg\n)\n\n# Create emitter with specific frame and dataset\nemitter = Emitter2DFit{Float64}(\n    1.0, 2.0, 1000.0, 10.0, 0.01, 0.01, 50.0, 2.0;\n    frame=5, dataset=2\n)\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.Emitter3D","page":"Library","title":"SMLMData.Emitter3D","text":"Emitter3D{T} <: AbstractEmitter\n\nRepresents a 3D emitter for SMLM simulations with position and brightness.\n\nFields\n\nx::T: x-coordinate in microns\ny::T: y-coordinate in microns\nz::T: z-coordinate in microns (axial position)\nphotons::T: number of photons emitted by the fluorophore\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.Emitter3DFit","page":"Library","title":"SMLMData.Emitter3DFit","text":"Emitter3DFit{T} <: AbstractEmitter\n\nRepresents fitted 3D localization results with uncertainties and temporal/tracking information.\n\nFields\n\nx::T: fitted x-coordinate in microns\ny::T: fitted y-coordinate in microns\nz::T: fitted z-coordinate in microns\nphotons::T: fitted number of photons\nbg::T: fitted background in photons/pixel\nσ_x::T: uncertainty in x position in microns\nσ_y::T: uncertainty in y position in microns\nσ_z::T: uncertainty in z position in microns\nσ_photons::T: uncertainty in photon count\nσ_bg::T: uncertainty in background in photons/pixel\nframe::Int: frame number in acquisition sequence\ndataset::Int: identifier for specific acquisition/dataset\ntrack_id::Int: identifier for linking localizations across frames (0 = unlinked)\nid::Int: unique identifier within dataset\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.Emitter3DFit-Union{Tuple{T}, NTuple{10, T}} where T","page":"Library","title":"SMLMData.Emitter3DFit","text":"Emitter3DFit{T}(x, y, z, photons, bg, σ_x, σ_y, σ_z, σ_photons, σ_bg;\n                frame=0, dataset=1, track_id=0, id=0) where T\n\nConvenience constructor for 3D localization fit results with optional identification parameters.\n\nArguments\n\nRequired\n\nx::T: fitted x-coordinate in microns\ny::T: fitted y-coordinate in microns\nz::T: fitted z-coordinate in microns\nphotons::T: fitted number of photons\nbg::T: fitted background in photons/pixel\nσ_x::T: uncertainty in x position in microns\nσ_y::T: uncertainty in y position in microns\nσ_z::T: uncertainty in z position in microns\nσ_photons::T: uncertainty in photon count\nσ_bg::T: uncertainty in background level\n\nOptional Keywords\n\nframe::Int=0: frame number in acquisition sequence\ndataset::Int=1: identifier for specific acquisition/dataset\ntrack_id::Int=0: identifier for linking localizations across frames\nid::Int=0: unique identifier within dataset\n\nExample\n\n# Create emitter with just required parameters\nemitter = Emitter3DFit{Float64}(\n    1.0, 2.0, -0.5,  # x, y, z\n    1000.0, 10.0,    # photons, background\n    0.01, 0.01, 0.02,# σ_x, σ_y, σ_z\n    50.0, 2.0        # σ_photons, σ_bg\n)\n\n# Create emitter with specific frame and tracking\nemitter = Emitter3DFit{Float64}(\n    1.0, 2.0, -0.5, 1000.0, 10.0, 0.01, 0.01, 0.02, 50.0, 2.0;\n    frame=5, track_id=1\n)\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.IdealCamera","page":"Library","title":"SMLMData.IdealCamera","text":"IdealCamera{T} <: AbstractCamera\n\nRepresents an ideal camera with regularly spaced pixels defined by their edges in physical units (microns).\n\nFields\n\npixel_edges_x::Vector{T}: Physical positions of pixel edges in x direction (microns)\npixel_edges_y::Vector{T}: Physical positions of pixel edges in y direction (microns)\n\nThe edges are computed from pixel centers, where pixel (1,1) is centered at  (pixelsizex/2, pixelsizey/2) in physical coordinates.\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.IdealCamera-Union{Tuple{T}, Tuple{AbstractUnitRange, AbstractUnitRange, Tuple{T, T}}} where T<:Real","page":"Library","title":"SMLMData.IdealCamera","text":"IdealCamera(pixel_centers_x::AbstractUnitRange, pixel_centers_y::AbstractUnitRange, \n            pixel_size::Tuple{T, T}) where T<:Real\n\nConstruct an IdealCamera with rectangular pixels given pixel center positions and x,y pixel sizes.\n\nArguments\n\npixel_centers_x::AbstractUnitRange: Range of pixel center indices in x (typically 1:N)\npixel_centers_y::AbstractUnitRange: Range of pixel center indices in y (typically 1:M)\npixel_size::Tuple{T, T}: Tuple of (xsize, ysize) in microns\n\nReturns\n\nIdealCamera{T} where T matches the type of the pixel sizes\n\nType Parameters\n\nT: Numeric type for all spatial measurements (e.g., Float64, Float32)\n\nExample\n\n# Create a 512x256 camera with rectangular pixels (0.1 x 0.15 microns)\ncam = IdealCamera(1:512, 1:256, (0.1, 0.15))\n\n# Create with Float32 precision\ncam32 = IdealCamera(1:512, 1:256, (0.1f0, 0.15f0))\n\nNote: Pixel (1,1) is centered at (pixelsize[1]/2, pixelsize[2]/2) in physical coordinates.\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.IdealCamera-Union{Tuple{T}, Tuple{AbstractUnitRange, AbstractUnitRange, T}} where T<:Real","page":"Library","title":"SMLMData.IdealCamera","text":"IdealCamera(pixel_centers_x::AbstractUnitRange, pixel_centers_y::AbstractUnitRange, pixel_size::T) where T<:Real\n\nConstruct an IdealCamera with square pixels given pixel center positions and a scalar pixel size.\n\nArguments\n\npixel_centers_x::AbstractUnitRange: Range of pixel center indices in x (typically 1:N)\npixel_centers_y::AbstractUnitRange: Range of pixel center indices in y (typically 1:M)\npixel_size::Real: Size of pixels in microns\n\nReturns\n\nIdealCamera{T} where T matches the type of pixel_size\n\nType Parameters\n\nT: Numeric type for all spatial measurements (e.g., Float64, Float32)\n\nExample\n\n# Create a 512x512 camera with 0.1 micron square pixels\ncam = IdealCamera(1:512, 1:512, 0.1)\n\n# Create with Float32 precision\ncam32 = IdealCamera(1:512, 1:512, 0.1f0)\n\nNote: Pixel (1,1) is centered at (pixelsize/2, pixelsize/2) in physical coordinates.\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.IdealCamera-Union{Tuple{T}, Tuple{Integer, Integer, Tuple{T, T}}} where T<:Real","page":"Library","title":"SMLMData.IdealCamera","text":"IdealCamera(n_pixels_x::Integer, n_pixels_y::Integer, pixel_size::Tuple{T, T}) where T<:Real\n\nConstruct an IdealCamera with rectangular pixels directly from the number of pixels and x,y pixel sizes.\n\nArguments\n\nn_pixels_x::Integer: Number of pixels in x dimension\nn_pixels_y::Integer: Number of pixels in y dimension\npixel_size::Tuple{T, T}: Tuple of (xsize, ysize) in microns\n\nReturns\n\nIdealCamera{T} where T matches the type of the pixel sizes\n\nExample\n\n# Create a 512x256 camera with rectangular pixels (0.1 x 0.15 microns)\ncam = IdealCamera(512, 256, (0.1, 0.15))\n\n# Create with Float32 precision\ncam32 = IdealCamera(512, 256, (0.1f0, 0.15f0))\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.IdealCamera-Union{Tuple{T}, Tuple{Integer, Integer, T}} where T<:Real","page":"Library","title":"SMLMData.IdealCamera","text":"IdealCamera(n_pixels_x::Integer, n_pixels_y::Integer, pixel_size::T) where T<:Real\n\nConstruct an IdealCamera with square pixels directly from the number of pixels and pixel size.\n\nArguments\n\nn_pixels_x::Integer: Number of pixels in x dimension\nn_pixels_y::Integer: Number of pixels in y dimension\npixel_size::Real: Size of pixels in microns\n\nReturns\n\nIdealCamera{T} where T matches the type of pixel_size\n\nExample\n\n# Create a 512x512 camera with 0.1 micron square pixels\ncam = IdealCamera(512, 512, 0.1)\n\n# Create with Float32 precision\ncam32 = IdealCamera(512, 512, 0.1f0)\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.SMLD","page":"Library","title":"SMLMData.SMLD","text":"SMLD\n\nAbstract type representing Single Molecule Localization Data (SMLD).\n\nInterface Requirements\n\nAny concrete subtype of SMLD must provide:\n\nemitters::Vector{<:AbstractEmitter}: Vector of localized emitters\n\nAdditional fields may include:\n\nCamera information\nAcquisition parameters\nAnalysis metadata\n\nNote: All emitter coordinates must be in physical units (microns).\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.SmiteSMD","page":"Library","title":"SMLMData.SmiteSMD","text":"SmiteSMD\n\nHelper structure for loading Smite SMD .mat files.\n\nFields\n\nfilepath::String: Path to the directory containing the .mat file\nfilename::String: Name of the .mat file\nvarname::String: Variable name in the .mat file (default: \"SMD\")\n\nExample\n\n# Load from default \"SMD\" variable\nsmd = SmiteSMD(\"path/to/data\", \"localizations.mat\")\n\n# Load from custom variable name\nsmd = SmiteSMD(\"path/to/data\", \"localizations.mat\", \"CustomSMD\")\n\n\n\n\n\n","category":"type"},{"location":"Library/#SMLMData.SmiteSMLD","page":"Library","title":"SMLMData.SmiteSMLD","text":"SmiteSMLD{T,E<:AbstractEmitter} <: SMLD\n\nSMLD type compatible with the Smite SMD (Single Molecule Data) format.\n\nFields\n\nemitters::Vector{E}: Vector of localized emitters\ncamera::AbstractCamera: Camera used for acquisition\nn_frames::Int: Total number of frames in acquisition\nn_datasets::Int: Number of datasets in the acquisition\nmetadata::Dict{String,Any}: Additional dataset information\n\nType Parameters\n\nT: Numeric type for coordinates (typically Float64)\nE: Concrete emitter type (typically Emitter2DFit or Emitter3DFit)\n\n\n\n\n\n","category":"type"},{"location":"Library/#Base.iterate-Tuple{SMLD}","page":"Library","title":"Base.iterate","text":"Base.iterate(smld::SMLD)\nBase.iterate(smld::SMLD, state)\n\nEnable iteration over emitters in an SMLD object.\n\n\n\n\n\n","category":"method"},{"location":"Library/#Base.length-Tuple{SMLD}","page":"Library","title":"Base.length","text":"Base.length(smld::SMLD)\n\nReturn the number of emitters in the SMLD object.\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.cat_smld-Tuple{Vector{<:SMLD}}","page":"Library","title":"SMLMData.cat_smld","text":"cat_smld(smlds::Vector{<:SMLD})\ncat_smld(smlds::SMLD...)\n\nConcatenate multiple SMLD objects into a single SMLD.\n\nArguments\n\nsmlds: Vector of SMLD objects or multiple SMLD arguments\n\nReturns\n\nNew SMLD containing all emitters from inputs\n\nNotes\n\nCamera must be identical across all SMLDs\nn_frames is set to maximum frame number across all inputs\nn_datasets is set to maximum dataset number across all inputs\nMetadata from first SMLD is used, with conflicts noted in metadata\n\nExamples\n\n# Concatenate two SMLDs\ncombined = cat_smld(smld1, smld2)\n\n# Concatenate multiple SMLDs\ncombined = cat_smld(smld1, smld2, smld3)\n\n# Concatenate vector of SMLDs\ncombined = cat_smld([smld1, smld2, smld3])\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.compute_bin_edges-Tuple{AbstractUnitRange, AbstractUnitRange, Tuple{Real, Real}}","page":"Library","title":"SMLMData.compute_bin_edges","text":"compute_bin_edges(centers_x::AbstractUnitRange, centers_y::AbstractUnitRange, pixel_size::Tuple{Real, Real})\n\nCompute pixel edges in both dimensions for rectangular pixels.\n\nArguments\n\ncenters_x::AbstractUnitRange: Range of pixel center indices in x\ncenters_y::AbstractUnitRange: Range of pixel center indices in y\npixel_size::Tuple{Real, Real}: Tuple of (xsize, ysize) in microns\n\nReturns\n\nTuple{Vector{Float64}, Vector{Float64}}: (edgesx, edgesy) in physical units (microns)\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.compute_bin_edges-Union{Tuple{T}, Tuple{AbstractUnitRange, AbstractUnitRange, T}} where T","page":"Library","title":"SMLMData.compute_bin_edges","text":"compute_bin_edges(centers_x::AbstractUnitRange, centers_y::AbstractUnitRange, pixel_size::T) where T\n\nCompute pixel edges in both dimensions. Returns vectors with same type as pixel_size.\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.compute_edges_1d-Union{Tuple{T}, Tuple{AbstractUnitRange, T}} where T<:Real","page":"Library","title":"SMLMData.compute_edges_1d","text":"compute_edges_1d(centers::AbstractUnitRange, pixel_size::T) where T<:Real\n\nCompute pixel edges in one dimension. Maintains the numeric type of pixelsize. The first edge starts at 0 and each pixel has width pixelsize.\n\nArguments\n\ncenters::AbstractUnitRange: Range of pixel center indices\npixel_size::T: Size of pixels in microns\n\nReturns\n\nVector{T}: Edge positions in physical units (microns), starting at 0\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.filter_frames-Tuple{SMLD, Integer}","page":"Library","title":"SMLMData.filter_frames","text":"filter_frames(smld::SMLD, frame::Integer)\nfilter_frames(smld::SMLD, frames::Union{AbstractVector,AbstractRange})\n\nEfficiently select emitters from specified frames.\n\nArguments\n\nsmld::SMLD: Input SMLD structure\nframes: Single frame number, vector of frame numbers, or range of frames\n\nReturns\n\nNew SMLD containing only emitters from specified frames\n\nExamples\n\n# Single frame\nframe_5 = filter_frames(smld, 5)\n\n# Range of frames\nearly = filter_frames(smld, 1:10)\n\n# Multiple specific frames\nselected = filter_frames(smld, [1,3,5,7])\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.filter_roi-Tuple{SMLD, Any, Any}","page":"Library","title":"SMLMData.filter_roi","text":"filter_roi(smld::SMLD, x_range, y_range)\nfilter_roi(smld::SMLD, x_range, y_range, z_range)\n\nEfficiently select emitters within a region of interest.\n\nArguments\n\nsmld::SMLD: Input SMLD structure\nx_range: Range or tuple for x coordinates (microns)\ny_range: Range or tuple for y coordinates (microns)\nz_range: Optional range or tuple for z coordinates (microns)\n\nReturns\n\nNew SMLD containing only emitters within the specified ROI\n\nExamples\n\n# 2D ROI\nregion = filter_roi(smld, 1.0:5.0, 2.0:6.0)\nregion = filter_roi(smld, (1.0, 5.0), (2.0, 6.0))\n\n# 3D ROI\nvolume = filter_roi(smld, 1.0:5.0, 2.0:6.0, -1.0:1.0)\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.get_pixel_centers-Tuple{AbstractCamera}","page":"Library","title":"SMLMData.get_pixel_centers","text":"get_pixel_centers(cam::AbstractCamera)\n\nCalculate the physical coordinates of all pixel centers for any camera type.\n\nFor each dimension, the center positions are computed as the midpoint between  consecutive edge positions. This works for both regular (uniform pixel size)  and irregular (varying pixel size) cameras.\n\nArguments\n\ncam::AbstractCamera: Any camera type that implements the AbstractCamera interface with pixeledgesx and pixeledgesy fields in physical units (microns)\n\nReturns\n\nTuple{Vector, Vector}: (centersx, centersy) where each vector contains the physical  coordinates (in microns) of pixel centers along that dimension\n\nExample\n\n# For a 512x512 camera with 0.1 micron pixels\ncam = IdealCamera(1:512, 1:512, 0.1)\ncenters_x, centers_y = get_pixel_centers(cam)\n\n# First pixel center should be at (0.05, 0.05) microns\n@assert centers_x[1] ≈ 0.05\n@assert centers_y[1] ≈ 0.05\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.load_smite_2d-Tuple{SmiteSMD}","page":"Library","title":"SMLMData.load_smite_2d","text":"load_smite_2d(smd::SmiteSMD)\n\nLoad a 2D Smite SMD .mat file and convert it to SmiteSMLD format.\n\nArguments\n\nsmd::SmiteSMD: SmiteSMD object specifying the file to load\n\nReturns\n\nSmiteSMLD containing 2D localizations\n\nNotes\n\nAll spatial coordinates are converted to microns\nIf PixelSize is not specified in the file, defaults to 0.1 microns\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.load_smite_3d-Tuple{SmiteSMD}","page":"Library","title":"SMLMData.load_smite_3d","text":"load_smite_3d(smd::SmiteSMD)\n\nLoad a 3D Smite SMD .mat file and convert it to SmiteSMLD format.\n\nArguments\n\nsmd::SmiteSMD: SmiteSMD object specifying the file to load\n\nReturns\n\nSmiteSMLD containing 3D localizations\n\nNotes\n\nAll spatial coordinates are converted to microns\nIf PixelSize is not specified in the file, defaults to 0.1 microns\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.merge_smld-Tuple{Vector{<:SMLD}}","page":"Library","title":"SMLMData.merge_smld","text":"merge_smld(smlds::Vector{<:SMLD}; adjust_frames=false, adjust_datasets=false)\nmerge_smld(smlds::SMLD...; adjust_frames=false, adjust_datasets=false)\n\nMerge multiple SMLD objects with options to adjust frame and dataset numbering.\n\nArguments\n\nsmlds: Vector of SMLD objects or multiple SMLD arguments\nadjust_frames: If true, adjusts frame numbers to be sequential\nadjust_datasets: If true, adjusts dataset numbers to be sequential\n\nReturns\n\nNew SMLD containing all emitters with adjusted numbering if requested\n\nNotes\n\nCamera must be identical across all SMLDs\nWhen adjust_frames=true, frame numbers are made sequential across all inputs\nWhen adjust_datasets=true, dataset numbers are made sequential\nMetadata includes information about the merge operation\n\nExamples\n\n# Simple merge\nmerged = merge_smld(smld1, smld2)\n\n# Merge with frame number adjustment\nmerged = merge_smld(smld1, smld2, adjust_frames=true)\n\n# Merge multiple with both adjustments\nmerged = merge_smld([smld1, smld2, smld3], \n                   adjust_frames=true, \n                   adjust_datasets=true)\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.physical_to_pixel-Tuple{Real, Real, Real}","page":"Library","title":"SMLMData.physical_to_pixel","text":"physical_to_pixel(x::Real, y::Real, pixel_size::Real)\n\nConvert physical coordinates (in microns) to pixel coordinates.\n\nArguments\n\nx::Real: x coordinate in microns (0,0 is top-left of image)\ny::Real: y coordinate in microns (0,0 is top-left of image)\npixel_size::Real: size of a pixel in microns\n\nReturns\n\nTuple{Float64, Float64}: (px,py) pixel coordinates where (1,1) is center of top-left pixel\n\nExample\n\n# For a camera with 0.1 micron pixels\npx, py = physical_to_pixel(0.05, 0.05, 0.1)  # Point 0.05,0.05 microns from origin\n# Returns (1.0, 1.0) - center of first pixel\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.physical_to_pixel_index-Tuple{Real, Real, Real}","page":"Library","title":"SMLMData.physical_to_pixel_index","text":"physical_to_pixel_index(x::Real, y::Real, pixel_size::Real)\n\nConvert physical coordinates (in microns) to integer pixel indices. Returns the pixel that contains the given physical coordinate.\n\nArguments\n\nx::Real: x coordinate in microns (0,0 is top-left of image)\ny::Real: y coordinate in microns (0,0 is top-left of image)\npixel_size::Real: size of a pixel in microns\n\nReturns\n\nTuple{Int, Int}: (px,py) pixel indices where (1,1) is top-left pixel\n\nExample\n\n# For a camera with 0.1 micron pixels\npx, py = physical_to_pixel_index(0.05, 0.05, 0.1)  # Point at center of first pixel\n# Returns (1, 1)\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.pixel_to_physical-Union{Tuple{T}, Tuple{Real, Real, T}} where T","page":"Library","title":"SMLMData.pixel_to_physical","text":"pixel_to_physical(px::Real, py::Real, pixel_size::T) where T\n\nConvert pixel coordinates to physical coordinates (in microns). Returns coordinates with the same type as pixel_size.\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.save_smite-Tuple{SmiteSMLD, String, String}","page":"Library","title":"SMLMData.save_smite","text":"save_smite(smld::SmiteSMLD, filepath::String, filename::String)\n\nSave SmiteSMLD data back to SMITE's SMD .mat format.\n\nArguments\n\nsmld::SmiteSMLD: SMLD object to save\nfilepath::String: Directory path where to save the file\nfilename::String: Name of the output .mat file\n\nNotes\n\nSaves in MATLAB v7.3 format\nPreserves all metadata fields\n\n\n\n\n\n","category":"method"},{"location":"Library/#SMLMData.@filter-Tuple{Any, Any}","page":"Library","title":"SMLMData.@filter","text":"@filter(smld, condition)\n\nFilter SMLD emitters using a natural condition syntax. Transforms expressions at compile time into efficient filtering operations.\n\nExamples\n\n# Simple conditions\nbright = @filter(smld, photons > 1000)\nearly = @filter(smld, frame < 10)\n\n# Compound conditions\ngood_fits = @filter(smld, σ_x < 0.02 && σ_y < 0.02)\nroi = @filter(smld, 1.0 <= x <= 5.0 && 1.0 <= y <= 5.0)\n\n\n\n\n\n","category":"macro"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"}]
}
